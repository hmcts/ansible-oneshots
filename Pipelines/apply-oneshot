#!groovy

def channel = '#devops-builds'
def specificrole = "${env.specificrole}"
def enableAnsibleDebug = "${env.enableAnsibleDebug}"
def extraVars = "${env.extraVars}"
def remoteUser = "${env.remoteUser}"
def credentials = "${env.credentials}"
extraVars = extraVars?.trim()

properties(
  [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ansible-oneshots/']]
)

@Library('Reform') _


def ansibleDebug = ''
if (enableAnsibleDebug == 'true'){
  ansibleDebug = '-vvvv'
}

def extraVarsString = "--extra-vars='host_to_apply_to=${env.host_to_apply_to}'"

def extraVarsArray = []
extraVarsArray = extraVars?.split()

for(varPair in extraVarsArray) {
  extraVarsString += " --extra-vars=${varPair}"
}


node {
  ws("${env.JOB_NAME}") {
    try {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {

        deleteDir()

        if (specificrole != '') {
          dir("ansible-management") {

            stage('Role Checkout') {
              git url: "https://github.com/hmcts/ansible-management.git", branch: "master", credentialsId: "jenkins-public-github-api-token"
              dir("roles/${env.specificrole}") {
                git url: "https://github.com/hmcts/${env.specificrole}", branch: "${branch}", credentialsId: "${env.credentials}"
              }
            }

            stage('Ansible Galaxy') {
              sh """
                echo 'Getting dependencies using ansible-galaxy'
                ansible-galaxy install -r roles/${env.specificrole}/requirements.yml -f --roles-path=roles/
          cat << EOF > ansible.cfg
[defaults]
roles_path = roles
EOF
              """
            }

            stage('Ansible Syntax') {
              sh """
                echo 'Checking role syntax'
                ansible-playbook ${extraVarsString} --syntax-check roles/${env.specificrole}/${env.playbookfile} -i ${env.host_to_apply_to}
              """
            }

            stage('Apply oneshot role to host') {
              sh """
                echo 'Applying specific role to host specified'
                ansible-playbook ${ansibleDebug} -i '${env.host_to_apply_to},' -u ${env.remoteUser} -b ${extraVarsString} roles/${env.specificrole}/${env.playbookfile}
              """
            }
          }
        } else /* specificrole == '' */ {

            stage('Role Checkout') {
              stage('Ensure correct branch') {
                checkout scm
                sh("git checkout ${env.branch}")
              }
            }

            stage('Ansible Lint') {
              sh("ansible-lint ${env.oneshot}/main.yml")
            }

            stage('Ansible Syntax') {
              sh("ansible-playbook ${extraVarsString} --syntax-check ${env.oneshot}/main.yml -i ${env.host_to_apply_to},")
            }

            stage('Apply oneshot to host') {
              sh("ansible-playbook ${ansibleDebug} -i '${env.host_to_apply_to},' -u ${env.remoteUser} -b ${extraVarsString} ${env.oneshot}/main.yml")
            }
         }
      }

    } catch (err) {
      /*notifyBuildFailure channel: "${channel}"*/
      throw err
    } finally {
      stage('Cleanup') {
          sh '''
            echo "Handled by deleteDir()"
            '''
        }
      deleteDir()
      }
  }
}
